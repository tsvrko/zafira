set schema 'zafira';

--DELETE OR DETACH ALL TESTS WHERE CREATED_AT::date < '2016-01-01'

DROP MATERIALIZED VIEW IF EXISTS TOTAL_VIEW;
CREATE MATERIALIZED VIEW TOTAL_VIEW AS (
SELECT row_number() OVER () AS ID,
 PROJECTS.NAME AS PROJECT,
 USERS.ID AS OWNER_ID,
 USERS.USERNAME AS OWNER,
 TEST_CONFIGS.ENV as Env,
 sum( case when TESTS.STATUS = 'PASSED' then 1 else 0 end ) AS PASSED,
 sum( case when TESTS.STATUS = 'FAILED' AND TESTS.KNOWN_ISSUE=FALSE then 1 else 0 end ) AS FAILED,
 sum( case when TESTS.STATUS = 'FAILED' AND TESTS.KNOWN_ISSUE=TRUE then 1 else 0 end ) AS KNOWN_ISSUE,
 sum( case when TESTS.STATUS = 'SKIPPED' then 1 else 0 end ) AS SKIPPED,
 sum( case when TESTS.STATUS = 'ABORTED' then 1 else 0 end ) AS ABORTED,
 sum( case when TESTS.STATUS = 'IN_PROGRESS' then 1 else 0 end ) AS IN_PROGRESS,
 COUNT(*) AS TOTAL,
 date_trunc('month', TESTS.CREATED_AT) AS TESTED_AT,
 sum(EXTRACT(epoch FROM (TESTS.FINISH_TIME - TESTS.START_TIME))/60)::bigint as TOTAL_MINUTES,
 sum(EXTRACT(epoch FROM(TESTS.FINISH_TIME - TESTS.START_TIME))/3600)::bigint as TOTAL_HOURS,
 avg(TESTS.FINISH_TIME - TESTS.START_TIME) as AVG_TIME
FROM TESTS INNER JOIN
	TEST_CASES ON TESTS.TEST_CASE_ID = TEST_CASES.ID INNER JOIN
	USERS ON TEST_CASES.PRIMARY_OWNER_ID = USERS.ID  INNER JOIN
	TEST_CONFIGS ON TESTS.TEST_CONFIG_ID = TEST_CONFIGS.ID LEFT JOIN
	PROJECTS ON TEST_CASES.PROJECT_ID = PROJECTS.ID
    WHERE TESTS.FINISH_TIME IS NOT NULL
    AND TESTS.START_TIME IS NOT NULL
    AND TESTS.START_TIME < date_trunc('month', current_date)
	AND PROJECTS.NAME <> 'Unknown'
    AND PROJECTS.NAME <> ''
    AND PROJECTS.NAME <> 'UADEMO'
GROUP BY PROJECT, OWNER_ID, OWNER, Env, TESTED_AT
ORDER BY TESTED_AT
);

DROP INDEX IF EXISTS TOTAL_VIEW_INDEX;
CREATE UNIQUE INDEX TOTAL_VIEW_INDEX ON TOTAL_VIEW (ID);

DROP INDEX IF EXISTS TOTAL_VIEW_PROJECT_INDEX;
CREATE INDEX TOTAL_VIEW_PROJECT_INDEX ON TOTAL_VIEW (PROJECT);

DROP INDEX IF EXISTS TOTAL_VIEW_OWNER_ID_INDEX;
CREATE INDEX TOTAL_VIEW_OWNER_ID_INDEX ON TOTAL_VIEW (OWNER_ID);

DROP INDEX IF EXISTS TOTAL_VIEW_OWNER_INDEX;
CREATE INDEX TOTAL_VIEW_OWNER_INDEX ON TOTAL_VIEW (OWNER);

DROP INDEX IF EXISTS TOTAL_VIEW_ENV_INDEX;
CREATE INDEX TOTAL_VIEW_ENV_INDEX ON TOTAL_VIEW (Env);

DROP INDEX IF EXISTS TOTAL_VIEW_TESTED_AT_INDEX;
CREATE INDEX TOTAL_VIEW_TESTED_AT_INDEX ON TOTAL_VIEW (TESTED_AT);

SELECT cron.schedule ('0 0 1 * *', $$REFRESH MATERIALIZED VIEW ZAFIRA.TOTAL_VIEW$$);


--Tests for the period from the beginning of previous month till previous day incl.
DROP MATERIALIZED VIEW IF EXISTS BIMONTHLY_VIEW;
CREATE MATERIALIZED VIEW BIMONTHLY_VIEW AS (
SELECT  row_number() OVER () AS ID,
    PROJECTS.NAME AS PROJECT,
	USERS.ID AS OWNER_ID,
	USERS.USERNAME AS OWNER,
	USERS.EMAIL AS EMAIL,
	TEST_RUNS.ENV as Env,
    TEST_CONFIGS.PLATFORM as Platform,
	TEST_CONFIGS.BROWSER as Browser,
    TEST_CONFIGS.APP_VERSION as Build,
	JOBS.JOB_URL AS Job,
	TEST_SUITES.USER_ID AS JOB_OWNER_ID,
    TEST_RUNS.ID AS TEST_RUN_ID,
	TEST_RUNS.BUILD_NUMBER As JobBuild,
	'<a href="' || JOBS.JOB_URL  || '/' || CAST(TEST_RUNS.BUILD_NUMBER AS text) || '/eTAF_Report' || '" target="_blank">' || JOBS.NAME || '</a>' as eTAF_Report,
	'<a href="' || JOBS.JOB_URL  || '/' || CAST(TEST_RUNS.BUILD_NUMBER AS text) || '/rebuild/parameterized' || '" target="_blank">Rebuild</a>' as Rebuild,
	TEST_RUNS.ELAPSED AS Elapsed,
	TEST_RUNS.STARTED_AT AS Started,
	TEST_RUNS.CREATED_AT::date AS Updated,
	TEST_RUNS.UPSTREAM_JOB_ID AS UPSTREAM_JOB_ID,
	TEST_RUNS.UPSTREAM_JOB_BUILD_NUMBER AS UPSTREAM_JOB_BUILD_NUMBER,
	TEST_RUNS.SCM_URL AS GIT_REPO,
	sum( case when TESTS.STATUS = 'PASSED' then 1 else 0 end ) AS PASSED,
	sum( case when TESTS.STATUS = 'FAILED' AND TESTS.KNOWN_ISSUE=FALSE then 1 else 0 end ) AS FAILED,
	sum( case when TESTS.STATUS = 'FAILED' AND TESTS.KNOWN_ISSUE=TRUE then 1 else 0 end ) AS KNOWN_ISSUE,
	sum( case when TESTS.STATUS = 'SKIPPED' then 1 else 0 end ) AS SKIPPED,
	sum( case when TESTS.STATUS = 'ABORTED' then 1 else 0 end ) AS ABORTED,
	sum( case when TESTS.STATUS = 'IN_PROGRESS' then 1 else 0 end ) AS IN_PROGRESS,
	count( TESTS.STATUS ) AS TOTAL,
	sum(EXTRACT(epoch FROM(TESTS.FINISH_TIME - TESTS.START_TIME))/3600)::bigint as TOTAL_HOURS
FROM TESTS INNER JOIN
	TEST_RUNS ON TEST_RUNS.ID=TESTS.TEST_RUN_ID INNER JOIN
	TEST_CASES ON TESTS.TEST_CASE_ID=TEST_CASES.ID INNER JOIN
	TEST_CONFIGS ON TESTS.TEST_CONFIG_ID = TEST_CONFIGS.ID LEFT JOIN
	PROJECTS ON TEST_CASES.PROJECT_ID = PROJECTS.ID INNER JOIN
	JOBS ON TEST_RUNS.JOB_ID = JOBS.ID INNER JOIN
	USERS ON TEST_CASES.PRIMARY_OWNER_ID=USERS.ID INNER JOIN
	TEST_SUITES ON TEST_RUNS.TEST_SUITE_ID = TEST_SUITES.ID
WHERE TESTS.CREATED_AT >= date_trunc('month', current_date - interval '1 month')
	AND TEST_RUNS.STARTED_AT >= date_trunc('month', current_date - interval '1 month')
	AND TEST_RUNS.STARTED_AT < date_trunc('day', current_date)
GROUP BY PROJECTS.NAME, TEST_RUNS.ID, USERS.ID, TEST_CONFIGS.PLATFORM, TEST_CONFIGS.BROWSER, TEST_CONFIGS.APP_VERSION, JOBS.JOB_URL, JOBS.NAME, TEST_SUITES.USER_ID);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_ID_INDEX;
CREATE UNIQUE INDEX BIMONTHLY_VIEW_ID_INDEX ON BIMONTHLY_VIEW (ID);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_PROJECT_INDEX;
CREATE INDEX BIMONTHLY_VIEW_PROJECT_INDEX ON BIMONTHLY_VIEW (PROJECT);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_OWNER_ID_INDEX;
CREATE INDEX BIMONTHLY_VIEW_OWNER_ID_INDEX ON BIMONTHLY_VIEW (OWNER_ID);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_OWNER_INDEX;
CREATE INDEX BIMONTHLY_VIEW_OWNER_INDEX ON BIMONTHLY_VIEW (OWNER);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_EMAIL_INDEX;
CREATE INDEX BIMONTHLY_VIEW_EMAIL_INDEX ON BIMONTHLY_VIEW (EMAIL);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_ENV_INDEX;
CREATE INDEX BIMONTHLY_VIEW_ENV_INDEX ON BIMONTHLY_VIEW (Env);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_PLATFORM_INDEX;
CREATE INDEX BIMONTHLY_VIEW_PLATFORM_INDEX ON BIMONTHLY_VIEW (Platform);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_BROWSER_INDEX;
CREATE INDEX BIMONTHLY_VIEW_BROWSER_INDEX ON BIMONTHLY_VIEW (Browser);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_BROWSER_INDEX;
CREATE INDEX BIMONTHLY_VIEW_BROWSER_INDEX ON BIMONTHLY_VIEW (Build);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_JOB_INDEX;
CREATE INDEX BIMONTHLY_VIEW_JOB_INDEX ON BIMONTHLY_VIEW (Job);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_JOB_OWNER_ID_INDEX;
CREATE INDEX BIMONTHLY_VIEW_JOB_OWNER_ID_INDEX ON BIMONTHLY_VIEW (JOB_OWNER_ID);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_JOB_BUILD_INDEX;
CREATE INDEX BIMONTHLY_VIEW_JOB_BUILD_INDEX ON BIMONTHLY_VIEW (JobBuild);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_ELAPSED_INDEX;
CREATE INDEX BIMONTHLY_VIEW_ELAPSED_INDEX ON BIMONTHLY_VIEW (Elapsed);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_STARTED_INDEX;
CREATE INDEX BIMONTHLY_VIEW_STARTED_INDEX ON BIMONTHLY_VIEW (Started);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_UPDATED_INDEX;
CREATE INDEX BIMONTHLY_VIEW_UPDATED_INDEX ON BIMONTHLY_VIEW (Updated);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_ETAF_REPORT_INDEX;
CREATE INDEX BIMONTHLY_VIEW_ETAF_REPORT_INDEX ON BIMONTHLY_VIEW (eTAF_Report);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_REBUILD_INDEX;
CREATE INDEX BIMONTHLY_VIEW_REBUILD_INDEX ON BIMONTHLY_VIEW (Rebuild);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_UPSTREAM_JOB_ID_INDEX;
CREATE INDEX BIMONTHLY_VIEW_UPSTREAM_JOB_ID_INDEX ON BIMONTHLY_VIEW (UPSTREAM_JOB_ID);

DROP INDEX IF EXISTS BIMONTHLY_VIEW_UPSTREAM_JOB_BUILD_NUMBER_INDEX;
CREATE INDEX BIMONTHLY_VIEW_UPSTREAM_JOB_BUILD_NUMBER_INDEX ON BIMONTHLY_VIEW (UPSTREAM_JOB_BUILD_NUMBER);

SELECT cron.schedule ('0 7 * * *', $$REFRESH MATERIALIZED VIEW ZAFIRA.BIMONTHLY_VIEW$$);

DROP VIEW IF EXISTS WEEKLY_VIEW;
CREATE VIEW WEEKLY_VIEW AS (
  SELECT  row_number() OVER () AS ID,
          PROJECTS.NAME AS PROJECT,
          USERS.ID AS OWNER_ID,
          USERS.USERNAME AS OWNER,
          USERS.EMAIL AS EMAIL,
          TEST_RUNS.ENV as Env,
          TEST_CONFIGS.PLATFORM as Platform,
          TEST_CONFIGS.BROWSER as Browser,
          TEST_CONFIGS.APP_VERSION as Build,
          JOBS.JOB_URL AS Job,
          TEST_SUITES.USER_ID AS JOB_OWNER_ID,
          TEST_RUNS.ID AS TEST_RUN_ID,
          TEST_RUNS.BUILD_NUMBER As JobBuild,
          '<a href="' || JOBS.JOB_URL  || '/' || CAST(TEST_RUNS.BUILD_NUMBER AS text) || '/eTAF_Report' || '" target="_blank">' || JOBS.NAME || '</a>' as eTAF_Report,
          '<a href="' || JOBS.JOB_URL  || '/' || CAST(TEST_RUNS.BUILD_NUMBER AS text) || '/rebuild/parameterized' || '" target="_blank">Rebuild</a>' as Rebuild,
          TEST_RUNS.ELAPSED AS Elapsed,
          TEST_RUNS.STARTED_AT AS Started,
          TEST_RUNS.CREATED_AT::date AS Updated,
          TEST_RUNS.UPSTREAM_JOB_ID AS UPSTREAM_JOB_ID,
          TEST_RUNS.UPSTREAM_JOB_BUILD_NUMBER AS UPSTREAM_JOB_BUILD_NUMBER,
          TEST_RUNS.SCM_URL AS GIT_REPO,
          sum( case when TESTS.STATUS = 'PASSED' then 1 else 0 end ) AS PASSED,
          sum( case when TESTS.STATUS = 'FAILED' AND TESTS.KNOWN_ISSUE=FALSE then 1 else 0 end ) AS FAILED,
          sum( case when TESTS.STATUS = 'FAILED' AND TESTS.KNOWN_ISSUE=TRUE then 1 else 0 end ) AS KNOWN_ISSUE,
          sum( case when TESTS.STATUS = 'SKIPPED' then 1 else 0 end ) AS SKIPPED,
          sum( case when TESTS.STATUS = 'ABORTED' then 1 else 0 end ) AS ABORTED,
          sum( case when TESTS.STATUS = 'IN_PROGRESS' then 1 else 0 end ) AS IN_PROGRESS,
          count( TESTS.STATUS ) AS TOTAL
  FROM TESTS INNER JOIN
    TEST_RUNS ON TEST_RUNS.ID=TESTS.TEST_RUN_ID INNER JOIN
    TEST_CASES ON TESTS.TEST_CASE_ID=TEST_CASES.ID INNER JOIN
    TEST_CONFIGS ON TESTS.TEST_CONFIG_ID = TEST_CONFIGS.ID LEFT JOIN
    PROJECTS ON TEST_CASES.PROJECT_ID = PROJECTS.ID INNER JOIN
    JOBS ON TEST_RUNS.JOB_ID = JOBS.ID INNER JOIN
    USERS ON TEST_CASES.PRIMARY_OWNER_ID=USERS.ID INNER JOIN
    TEST_SUITES ON TEST_RUNS.TEST_SUITE_ID = TEST_SUITES.ID
  WHERE TESTS.CREATED_AT >= date_trunc('day', date_trunc('week', current_date)  - interval '2 day')
        AND TEST_RUNS.STARTED_AT >= date_trunc('day', date_trunc('week', current_date)  - interval '2 day')
  GROUP BY PROJECTS.NAME, TEST_RUNS.ID, USERS.ID, TEST_CONFIGS.PLATFORM, TEST_CONFIGS.BROWSER, TEST_CONFIGS.APP_VERSION, JOBS.JOB_URL, JOBS.NAME, TEST_SUITES.USER_ID
);

DROP VIEW IF EXISTS NIGHTLY_VIEW;
CREATE VIEW NIGHTLY_VIEW AS (
SELECT  row_number() OVER () AS ID,
	USERS.ID AS OWNER_ID,
    PROJECTS.NAME AS PROJECT,
	USERS.USERNAME AS OWNER,
	USERS.EMAIL AS EMAIL,
	TEST_RUNS.ENV as Env,
    TEST_CONFIGS.PLATFORM as Platform,
	TEST_CONFIGS.BROWSER as Browser,
    TEST_CONFIGS.APP_VERSION as Build,
	JOBS.JOB_URL AS Job,
	TEST_SUITES.USER_ID AS JOB_OWNER_ID,
    TEST_RUNS.ID AS TEST_RUN_ID,
	TEST_RUNS.BUILD_NUMBER As JobBuild,
	'<a href="' || JOBS.JOB_URL  || '/' || CAST(TEST_RUNS.BUILD_NUMBER AS text) || '/eTAF_Report' || '" target="_blank">' || JOBS.NAME || '</a>' as eTAF_Report,
	'<a href="' || JOBS.JOB_URL  || '/' || CAST(TEST_RUNS.BUILD_NUMBER AS text) || '/rebuild/parameterized' || '" target="_blank">Rebuild</a>' as Rebuild,
	TEST_RUNS.ELAPSED AS Elapsed,
	TEST_RUNS.STARTED_AT AS Started,
	TEST_RUNS.CREATED_AT::date AS Updated,
	TEST_RUNS.UPSTREAM_JOB_ID AS UPSTREAM_JOB_ID,
	TEST_RUNS.UPSTREAM_JOB_BUILD_NUMBER AS UPSTREAM_JOB_BUILD_NUMBER,
	TEST_RUNS.SCM_URL AS GIT_REPO,
	sum( case when TESTS.STATUS = 'PASSED' then 1 else 0 end ) AS PASSED,
	sum( case when TESTS.STATUS = 'FAILED' AND TESTS.KNOWN_ISSUE=FALSE then 1 else 0 end ) AS FAILED,
	sum( case when TESTS.STATUS = 'FAILED' AND TESTS.KNOWN_ISSUE=TRUE then 1 else 0 end ) AS KNOWN_ISSUE,
	sum( case when TESTS.STATUS = 'SKIPPED' then 1 else 0 end ) AS SKIPPED,
	sum( case when TESTS.STATUS = 'ABORTED' then 1 else 0 end ) AS ABORTED,
	sum( case when TESTS.STATUS = 'IN_PROGRESS' then 1 else 0 end ) AS IN_PROGRESS,
	count( TESTS.STATUS ) AS TOTAL
FROM TESTS INNER JOIN
	TEST_RUNS ON TEST_RUNS.ID=TESTS.TEST_RUN_ID INNER JOIN
	TEST_CASES ON TESTS.TEST_CASE_ID=TEST_CASES.ID INNER JOIN
	TEST_CONFIGS ON TESTS.TEST_CONFIG_ID = TEST_CONFIGS.ID LEFT JOIN
	PROJECTS ON TEST_CASES.PROJECT_ID = PROJECTS.ID INNER JOIN
	JOBS ON TEST_RUNS.JOB_ID = JOBS.ID INNER JOIN
	USERS ON TEST_CASES.PRIMARY_OWNER_ID=USERS.ID INNER JOIN
	TEST_SUITES ON TEST_RUNS.TEST_SUITE_ID = TEST_SUITES.ID
WHERE TESTS.CREATED_AT >= date_trunc('day', current_date)
	AND TEST_RUNS.STARTED_AT >= date_trunc('day', current_date)
GROUP BY PROJECTS.NAME, TEST_RUNS.ID, USERS.ID, TEST_CONFIGS.PLATFORM, TEST_CONFIGS.BROWSER, TEST_CONFIGS.APP_VERSION, JOBS.JOB_URL, JOBS.NAME, TEST_SUITES.USER_ID
);